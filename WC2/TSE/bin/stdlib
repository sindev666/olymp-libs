/// STDLIB {begin}
// #pragma debug
// #pragma trace
#ifndef _STDLIB_
#define _STDLIB_ STDLIB$VERSION$0.2
//     STDLIB is main library for Script Editor
//     It contains all standard triggers futures
//     For non-standart futures import other libraries
//     If you import some other library you dont need to import stdlib
//     To get help about Script Editor enter #import help.txt
#pragma description
/// compare variable methods
#define CMP_EQ 0 // ==
#define CMP_NEQ 1 // !=
#define CMP_BIGGER_EQ 2 // >=
#define CMP_SMALLER_EQ 3 // <=
#define CMP_BIGGER 4 // >
#define CMP_SMALLER 5 // <

/// upgrades ids
#define ARROWS 0
#define SWORDS 1
#define ARMOR 2
#define SHIP_DMG 3
#define SHIP_ARMOR 4
#define SHIP_SPEED 5
#define CATA_DMG 6

/// magic ids
#define VISION 0
#define HEAL 1
#define GREATER_HEAL 2
#define EXORCISM 3
#define FLAME_SHIELD 4
#define FIREBALL 5
#define SLOW 6
#define INVIS 7
#define POLYMORPH 8
#define BLIZZARD 9
#define EYE_OF_KILROG 10
#define BLOOD 11
#define RAISE_DEAD 12
#define COIL 13
#define WHIRLWIND 14
#define HASTE 15
#define UNHOLY_ARMOR 16
#define RUNES 17
#define DEATH_AND_DECAY 18

/// players ids
#define P_RED 0
#define P_BLUE 1
#define P_GREEN 2
#define P_VIOLET 3
#define P_ORANGE 4
#define P_BLACK 5
#define P_WHITE 6
#define P_YELLOW 7
#define PLAYER9 8
#define PLAYER10 9
#define PLAYER11 10
#define PLAYER12 11
#define PLAYER13 12
#define PLAYER14 13
#define PLAYER15 14
#define P_NEUTRAL 15

/// ---UNIT TYPES---
#define U_FOOTMAN 0
#define U_GRUNT 1
#define U_PEASANT 2
#define U_PEON 3
#define U_BALLISTA 4
#define U_CATAPULT 5
#define U_KNIGHT 6
#define U_OGRE 7
#define U_ARCHER 8
#define U_TROLL 9
#define U_MAGE 10
#define U_DK 11
#define U_PALADIN 12
#define U_OGREMAGE 13
#define U_DWARWES 14
#define U_GOBLINS 15
#define U_ATTACK_PEASANT 16
#define U_ATTACK_PEON 17
#define U_RANGER 18
#define U_BERSERK 19
#define U_ALLERIA 20
#define U_TERON 21
#define U_KURDRAN 22
#define U_DENTARG 23
#define U_HADGAR 24
#define U_GROM 25
#define U_HTANKER 26
#define U_OTANKER 27
#define U_HTRANSPORT 28
#define U_OTRANSPORT 29
#define U_HDESTROYER 30
#define U_ODESTROYER 31
#define U_BATTLESHIP 32
#define U_JUGGERNAUT 33
#define TYPE_A100 34
#define U_DEATHWING 35
#define TYPE_B36 36
#define TYPE_B37 37
#define U_SUBMARINE 38
#define U_TURTLE 39
#define U_FLYER 40
#define U_ZEPPELIN 41
#define U_GRIFON 42
#define U_DRAGON 43
#define U_TYRALYON 44
#define U_EYE 45
#define U_DANATH 46
#define U_KARGATH 47
#define TYPE_A5 48
#define U_CHOGAL 49
#define U_LOTHAR 50
#define U_GULDAN 51
#define U_UTER 52
#define U_ZULJIN 53
#define TYPE_A600 54
#define U_SKELETON 55
#define U_DEMON 56
#define U_CRITTER 57
#define U_FARM 58
#define U_PIGFARM 59
#define U_HBARRACK 60
#define U_OBARRACK 61
#define U_CHURCH 62
#define U_ALTAR 63
#define U_HTOWER 64
#define U_OTOWER 65
#define U_STABLES 66
#define U_OGREMOUND 67
#define U_INVENTOR 68
#define U_ALCHEMIST 69
#define U_AVIARY 70
#define U_DRAGONROOST 71
#define U_SHIPYARD 72
#define U_WHARF 73
#define U_TOWN_HALL 74
#define U_GREAT_HALL 75
#define U_HLUMBER 76
#define U_OLUMBER 77
#define U_HFOUNDRY 78
#define U_OFOUNDRY 79
#define U_MAGE_TOWER 80
#define U_TEMPLE 81
#define U_HSMITH 82
#define U_OSMITH 83
#define U_HREFINERY 84
#define U_OREFINERY 85
#define U_HPLATFORM 86
#define U_OPLATFORM 87
#define U_KEEP 88
#define U_STRONGHOLD 89
#define U_CASTLE 90
#define U_FORTRESS 91
#define U_MINE 92
#define U_OIL 93
#define U_HSTART 94
#define U_OSTART 95
#define U_HARROWTOWER 96
#define U_OARROWTOWER 97
#define U_HCANONTOWER 98
#define U_OCANONTOWER 99
#define U_CIRCLE 100
#define U_PORTAL 101
#define U_RUNESTONE 102
#define U_HWALL 103
#define U_OWALL 104
#define U_DEAD 105
#define U_DEAD_BUILDING1x1 106
#define U_DEAD_BUILDING2x2 107
#define U_DEAD_BUILDING3x3 108
#define U_DEAD_BUILDING4x5 109

#define ANY_BUILDING 105
#define ANY_MEN 106
#define ANY_UNITS 107
#define ANY_BUILDING_2x2 108
#define ANY_BUILDING_3x3 109
#define ANY_BUILDING_4x4 110
/// ---UNIT TYPES---

/// bullets and effects
#define B_LIGHTNING 0
#define B_HAMMER 1
#define B_FIREBALL 2
#define B_FIRESHIELD 3
#define B_FIRESPIN 4
#define B_BLIZZARD 5
#define B_ROT 6
#define B_BIG_CANNON 7
#define B_EXORCISM 8
#define B_HEAL 9
#define B_COIL 10
#define B_RUNE 11
#define B_TORNADO 12
#define B_STONE 13
#define B_BOLT 14
#define B_ARROW 15
#define B_AXE 16
#define B_HTORPEDO 17
#define B_OTORPEDO 18
#define B_LIGHT_FIRE 19
#define B_HEAVY_FIRE 20
#define B_CAT_HIT 21
#define B_SPARKLE 22
#define B_BOOM_FIRE 23
#define B_CANNON 24
#define B_SHOT_FIRE 25
#define B_CANNON_HIT 26
#define B_DEMON_FIRE 27
#define B_CROSS 28
#define B_NONE 29

//spells sounds
#define SS_BLOOD 0
#define SS_DECAY 1
#define SS_COIL 2
#define SS_EXORCISM 3
#define SS_FLAMESHIELD 4
#define SS_HASTE 5
#define SS_HEAL 6
#define SS_VISION 7
#define SS_BLIZZARD 8
#define SS_INVIZ 9
#define SS_EYE 10
#define SS_POLYMORPH 11
#define SS_SLOW 12
#define SS_THUNDER 13
#define SS_THDARK 14
#define SS_ARMOR 15
#define SS_WIND 16

//allowed units 4 bytes
#define A_FOOT 0
#define A_PEON 1
#define A_CATA 2
#define A_OGRE 3
#define A_ARHC 4
#define A_MAGE 5
#define A_TANKER 6
#define A_DESTROYER 7
#define A_TRANSPORT 8
#define A_BATTLE 9
#define A_SUB 10
#define A_FLYER 11
#define A_DRAGON 12
#define A_UNUSED 13
#define A_SAP 14
#define A_AVIARY 15
#define A_FARM 16
#define A_BARRACK 17
#define A_LUMBER 18
#define A_STABLES 19
#define A_TEMPLE 20
#define A_FOUDNRY 21
#define A_REFINERY 22
#define A_INVENTOR 23
#define A_ALTAR 24
#define A_TOWER 25
#define A_TH1 26
#define A_TH2 27
#define A_TH3 28
#define A_SMITH 29
#define A_SHIPYARD 30

//allowed upgrades 4 bytes
#define A_ARROW1 0
#define A_ARROW2 1
#define A_SWORD1 2
#define A_SWORD2 3
#define A_ARMOR1 4
#define A_ARMOR2 5
#define A_SHIP_ATTACK1 6
#define A_SHIP_ATTACK2 7
#define A_SHIP_ARMOR1 8
#define A_SHIP_ARMOR2 9
#define A_UNUSED_SHIP1 10
#define A_UNUSED_SHIP2 11
#define A_CATA1 12
#define A_CATA2 13
#define A_UNUSED_SPEED1 14
#define A_UNUSED_SPEED2 15
#define A_BERSERKERS 16
#define A_RANGE 17
#define A_SCOUT 18
#define A_MARKS 19

/// allowed spells
#define A_VISION 0
#define A_HEAL 1
#define A_GREATER_HEAL 2
#define A_EXORCISM 3
#define A_FLAME_SHIELD 4
#define A_FIREBALL 5
#define A_SLOW 6
#define A_INVIS 7
#define A_POLYMORF 8
#define A_BLIZZARD 9
#define A_EYE 10
#define A_BLOOD 11
#define A_UNUSED_HALLUCINATE 12
#define A_RAISE 13
#define A_COIL 14
#define A_WIND 15
#define A_HASTE 16
#define A_UNHOLY 17
#define A_RUNES 18
#define A_DD 19
#define A_ALTAR_UPGR 20

/// learned spells
#define L_VISION 0
#define L_HEAL 1
#define L_GREATER_HEAL 2
#define L_EXORCISM 3
#define L_FLAME_SHIELD 4
#define L_FIREBALL 5
#define L_SLOW 6
#define L_INVIS 7
#define L_POLYMORF 8
#define L_BLIZZARD 9
#define L_EYE 10
#define L_BLOOD 11
#define L_UNUSED_HALLUCINATE 12
#define L_RAISE 13
#define L_COIL 14
#define L_WIND 15
#define L_HASTE 16
#define L_UNHOLY 17
#define L_RUNES 18
#define L_DD 19
#define L_ALTAR_UPGR 20

/// UNIT STATS
#define S_DRAW_X 0
#define S_DRAW_Y 2
#define S_SEQ 4
#define S_SEQ_FLAG 6
#define S_ANIMATION_TIMER 7
#define S_ANIMATION 8 

#define ANIM_DEAD 0
#define ANIM_DIE 1
#define ANIM_STOP 2
#define ANIM_MOVE 3
#define ANIM_ATTACK 4
#define ANIM_BUILD 5
#define ANIM_TRANSPORT_SHORE 6

#define S_FRAME 9
#define S_FACE 10
	#define FACE_N 0
	#define FACE_NE 1
	#define FACE_E 2
	#define FACE_SE 3
	#define FACE_S 4
	#define FACE_SW 5
	#define FACE_W 6
	#define FACE_NW 7

#define S_SEQ_SOUND 11
// sequence bytes
#define S_X 24
#define S_Y 26

#define S_AIFLAGS1 32
#define S_AIFLAGS2 33
#define S_HP 34
#define S_SOUND_COUNTER 36
#define S_COMMANDS 37
#define S_MANA 38
#define S_ID 39
// 40 41 vision mask
#define S_MOVEMENT_TYPE 42

#define MOV_LAND 0
#define MOV_AIR 1
#define MOV_WATER 2
#define MOV_SHORE 3

#define S_SPRITE 43
#define S_OWNER 44
#define S_COLOR 45
#define S_ORDER 46
#define S_NEXT_ORDER 47

// UNIT ORDERS
#define ORDER_DEAD 0
#define ORDER_DIE 1
#define ORDER_STOP 2
#define ORDER_MOVE 3
#define ORDER_MOVE_PATROL 4
#define ORDER_PATROL 5
#define ORDER_FOLLOW 6
#define ORDER_FOLLOW_GUARD 7
#define ORDER_ATTACK 8
#define ORDER_ATTACK_TARGET 9
#define ORDER_ATTACK_AREA 10
#define ORDER_ATTACK_WALL 11
#define ORDER_DEFEND 12
#define ORDER_STAND 13
#define ORDER_STAND_ATTACK 14
#define ORDER_DEFEND_GROUND 15
#define ORDER_DEFEND_STOPPED 16
#define ORDER_ATTACK_GROUND 17
#define ORDER_ATTACK_GROUND_MOVE 18
#define ORDER_DEMOLISH 19
#define ORDER_DEMOLISH_NEAR 20
#define ORDER_DEMOLISH_AT 21
#define ORDER_PEON_BUILD 22
#define ORDER_HARVEST 23
#define ORDER_RETURN 24
#define ORDER_ENTER 25
#define ORDER_LEAVE 26
#define ORDER_REPAIR 27
#define ORDER_CREATE_BLDG 28
#define ORDER_UNLOAD_ALL 29
#define ORDER_DOCK 30
#define ORDER_UNDOCK 31
#define ORDER_WAIT 32
#define ORDER_BLDG_WAIT 33
#define ORDER_ENTER_TRANSPORT 34
#define ORDER_LEAVE_TRANSPORT 35
#define ORDER_TRAVELING 36
#define ORDER_BLDG_BUILD 37
#define ORDER_SPELL_VISION 38
#define ORDER_SPELL_HEAL 39
#define ORDER_SPELL_AREAHEAL 40
#define ORDER_SPELL_EXORCISM 41
#define ORDER_SPELL_FIRESHIELD 42
#define ORDER_SPELL_FIREBALL 43
#define ORDER_SPELL_SLOW 44
#define ORDER_SPELL_INVIS 45
#define ORDER_SPELL_POLYMORPH 46
#define ORDER_SPELL_BLIZZARD 47
#define ORDER_SPELL_EYE 48
#define ORDER_SPELL_BLOODLUST 49
#define ORDER_SPELL_RAISEDEAD 50
#define ORDER_SPELL_DRAINLIFE 51
#define ORDER_SPELL_WHIRLWIND 52
#define ORDER_SPELL_HASTE 53
#define ORDER_SPELL_ARMOR 54
#define ORDER_SPELL_RUNES 55
#define ORDER_SPELL_ROT 56
#define ORDER_RESURRECT 57
#define ORDER_WAIT_CONVERT 58
#define ORDER_VICTORY_CIRCLE 59
#define ORDER_NONE 60

/// UNIT STATS
#define S_MOV_PATH01 49
// 20 movement path bytes

#define S_INVIZ 68
#define S_SHIELD 70
#define S_BLOOD 72
#define S_HASTE 74
#define S_AI_SPELLS 76

#define S_NEXT_FIRE 78
#define S_FLASH_COLOR 80
#define S_FLASH_COUNTER 81
//82 83 unknown bytes
#define S_ATTACKER_POINTER 84
// ai bytes
#define S_AI_DEST_X 88
#define S_AI_DEST_Y 90
#define S_AI_DEST_REGION 92
#define S_AI_ORDER 94

	#define AI_ORDER_NONE 0
	#define AI_ORDER_DEFEND 1
	#define AI_ORDER_ATTACK 2
	#define AI_ORDER_TRANSPORT 3
	#define AI_ORDER_PATROL 4
	#define AI_ORDER_GUARD 5
	#define AI_ORDER_SHIP_PATROL 6

#define S_AI_AIFLAGS 95

// ai flags
	#define AI_PLEASE_TRANSPORT 0x1
	#define AI_PASSIVE 0x2

#define S_NEXT_UNIT_POINTER 104

// peon type
#define S_LAST_HARVEST_X 108
#define S_LAST_HARVEST_Y 110
#define S_PEON_GOLDMINE_POINTER 112
#define S_PEON_TREE_CHOPS 116
#define S_PEON_FLAGS 117

	#define PEON_HARVEST_GOLD	0x80
	#define PEON_HARVEST_LUMBER	0x40
	#define PEON_LOADED			0x20
	#define PEON_ENTERED		0x10
	#define PEON_SAVED_LOCATION	0x08
	#define PEON_IN_CASTLE		0x04
	#define PEON_CHOPPING		0x02

#define S_PEON_AI_PARM 118

// build type
#define S_BUILD_ORDER 108
#define S_BUILD_TYPE 109
#define S_BUILD_PROGRES 110
#define S_BUILD_PROGRES_TOTAL 112

// unknown byte used for kills
#define S_KILLS 120
// byte 121?
#define S_ATTACK_COUNTER 122
// unknown bytes

// peon type 2
#define S_PEON_BUILD 127
#define S_PEON_BUILD_X 128
#define S_PEON_BUILD_Y 130

// build type 2
#define S_RESOURCES 130
// byte 131?

#define S_ORDER_X 132
#define S_ORDER_Y 134
#define S_ORDER_UNIT_POINTER 136
// unknown byte 140
#define S_RETARGET_ORDER 141
// unknown byte timer? 142
// unknown byte 143
#define S_RETARGET_X1 144
#define S_RETARGET_Y1 146
#define S_RETARGET_X2 148
#define S_RETARGET_Y2 150

/// STDLIB
#define msg #pragma$message
#define err #pragma$error
#define resolve #define
#define foreach #foreach

fun exit
#asm 0
end

fun victory_menu int SHOW
#asm 1 SHOW
end

#define mission_kill_all 255
// some stupid shit
fun mission int ID
#asm 2 ID
end

// alliance
fun al_both int PLAYER_A int PLAYER_B int SET
#asm 3 PLAYER_A PLAYER_B SET
end

// vision
fun vis_both int PLAYER_A int PLAYER_B int SET
#asm 4 PLAYER_A PLAYER_B SET
end

// vision&alliance
fun team int team.A int team.B int team.SET
al_both(team.A, team.B, team.SET)
vis_both(team.A, team.B, team.SET)
end

fun team int team.A int team.B
al_both(team.A, team.B, 1)
vis_both(team.A, team.B, 1)
end

fun := auto VALUE int* VARIABLE
msg VARIABLE = VALUE
#asm 5 VARIABLE VALUE
end

fun compare int* compare.A int* compare.B int compare.FLAG int compare.METHOD
//msg compare.A compare.B compare.FLAG compare.METHOD
#asm 8 compare.A compare.METHOD compare.B compare.FLAG  
end

fun < int* if.A int* if.B int if.FLAG
 msg if.A if.B if.FLAG
compare(if.A,if.B,if.FLAG,CMP_SMALLER)
end

fun > int* if.A int* if.B int if.FLAG
compare(if.A,if.B,if.FLAG,CMP_BIGGER)
end

fun >= int* if.A int* if.B int if.FLAG
compare(if.A,if.B,if.FLAG,CMP_BIGGER_EQ)
end

fun = int* if.A int* if.B int if.FLAG
compare(if.A,if.B,if.FLAG,CMP_EQ)
end

fun <= int* if.A int* if.B int if.FLAG
compare(if.A,if.B,if.FLAG,CMP_SMALLER_EQ)
end

// [x1;x2) [y1;y2) ???
fun set_region int region.x1 int region.y1 int region.x2 int region.y2
#asm 9 region.x1 region.y1 region.x2 region.y2
end

// If comp and X is allied => comp give X shared vision
fun COMPS.allied_vision 
#asm 10 1
end

fun COMPS.allied_vision int COMPS.allied_vision.FLAG
#asm 10 COMPS.allied_vision.FLAG
end

fun save int* save_
#asm 11 save_ save_
end

fun load int* load_
#asm 12 load_ load_
end

fun ?= int* a_683 int* b_683
#asm 11 a_683 SET_?_SUPPORT
#asm 12 b_683 SET_?_SUPPORT
end

fun + int* oper.a int* oper.b
#asm 13 oper.a oper.b
end

fun - int* oper.a int* oper.b
#asm 14 oper.a oper.b
end

fun * int* oper.a int* oper.b
#asm 15 oper.a oper.b
end

fun / int* oper.a int* oper.b
#asm 16 oper.a oper.b
end

fun * int* a_684 int* b_684 int* c_684
c_684 = a_684
#asm 15 c_684 a_684
end

fun / int* a_684 int* b_684 int* c_684
c_684 = a_684
#asm 16 c_684 a_684
end

fun % int* a_684 int* b_684 int* c_684
c_684 = a_684
#asm 17 c_684 a_684
end

#define LANG_IF 22
#define LANG_IFNOT 33
#define LANG_ENDIF 23
#define LANG_SET_FLAG #asm$21$0$1
#define LANG_RESET_FLAG #asm$21$0$0

// LOCAL - win game
fun victory local
#asm 24
end

// LOCAL - lose game
fun defeat local
#asm 25
end

// 0,1,2 - ADD GOLD FOREST OIL 3,4,5 SUB
fun change_resource int change_resource.P int change_resource.res int* change_resource.val int change_resource.mul
#asm 26 change_resource.P change_resource.res change_resource.mul change_resource.val
end

// Transforms units))
fun unit_transform int unit_transform.player int unit_transform.UNIT_A int unit_transform.UNIT_B
#asm 18 unit_transform.player unit_transform.UNIT_A unit_transform.UNIT_B
end

// Creating units))
fun unit_createxy int* unit_create.N int unit_create.UNIT int unit_create.P int unit_create.X int unit_create.Y
#asm 19 unit_create.X unit_create.Y unit_create.UNIT unit_create.P unit_create.N
end

fun unit_createnxy int unit_create.N int unit_create.UNIT int unit_create.P int unit_create.X int unit_create.Y
#asm 20 unit_create.X unit_create.Y unit_create.UNIT unit_create.P unit_create.N
end

fun build_sheeps local
#asm 27
end

fun build_button local
#asm 28
end

// dont know what it do(
fun mission_default
#asm 29
end

fun ul_count int* ul_count.res
#asm 30 ul_count.res
end

fun change_spell int change_spell.spell int change_spell.cost
#asm 31 change_spell.spell change_spell.cost
end

// move player active view 
fun move_view int x int y local
#asm 32 x y
end

// clear all messages from chat
fun clear_view local
#asm 36
end

fun message auto message.msg int time local
#asm 37 time
#define message8 #message8
message8 message.msg
end

#define RES_GOLD 0
#define RES_LUMBER 1
#define RES_OIL 2
fun set_resource int set_resource.P int set_resource.type int set_resource.cost
#asm 34 set_resource.P set_resource.type set_resource.cost@32
end

#define fastest_default 13
fun set_fastest int set_fastest.speed
#asm 38 set_fastest.speed
end

fun compare_res int compare.A int compare.res int compare.B int compare.FLAG int compare.METHOD
#asm 35 compare.A compare.res compare.B@32 compare.METHOD compare.FLAG
end

// only A can damage B
fun attack_rules int attack_rules.A int attack_rules.B int attack_rules.ID
#asm 39 attack_rules.ID attack_rules.A attack_rules.B
end

fun repair_units int repair_units.can
#asm 40 repair_units.can
end

fun repair_units
repair_units(1)
end

fun runestone
#asm 41
end

#define RS_INVIZ 0
#define RS_SHIELD 1
#define RS_BLOOD 2
#define RS_HASTE 3
#define RS_FLAME 4
#define RS_MANA 5
#define RS_HEAL 6
#define RS_KILL 7
#define RS_ALLY 8
fun runestone.effect int runestone.effect_id int runestone.value
#asm 42 runestone.effect_id runestone.value
end

fun upgrade_power int upgrade_power.id int upgrade_power.power
#asm 43 upgrade_power.id upgrade_power.power
end

fun timer int timer.id int timer.time int timer.flag
#asm 44 timer.id timer.time timer.flag
end

fun have_opponents int have_opponents.player int have_opponents.flag
#asm 45 have_opponents.player have_opponents.flag
end

fun have_opponents int have_opponents.flag local
#asm 45 8 have_opponents.flag
end

fun angry_comps int angry_comps.can
#asm 46 angry_comps.can
end

fun angry_comps
#asm 46 1
end

fun allied int allied.A int allied.B int allied.FLAG
#asm 47 allied.A allied.B allied.FLAG
end

fun capture_buildings int capture_buildings.can
#asm 48 capture_buildings.can
end

fun capture_buildings
#asm 48 1
end

fun capture_peons int capture_peons.only
#asm 49 capture_peons.only
end

fun capture_peons
#asm 49 1
end

fun capture_base int capture_base.val
#asm 50 capture_base.val
end

fun capture_base
#asm 50 1
end

fun portal local
#asm 51
end

fun repair_cata int repair_cata.rep
#asm 52 repair_cata.rep
end

fun repair_cata
#asm 52 1
end

// wharf trigger
fun repair_ships local
#asm 53
end

fun portal_ally int portal_ally.use local
#asm 54 portal_ally.use
end

fun portal_ally local
#asm 54 1
end

fun portal_mage int portal_mage.use local
#asm 55 portal_mage.use
end

fun portal_mage local
#asm 55 1
end

fun build_demons local
#asm 57
end

#define human_slot 0
#define orc_slot 8
fun build_heroes int build_heroes.slot int build_heroes.unit local
#asm 58 build_heroes.slot build_heroes.unit
end

fun autoheal local
#asm 59
end

fun fireball int fireball.dmg
#asm 61 fireball.dmg
end

fun effect int effect.id int effect.time
#asm 62 effect.id effect.time
end

fun transport
#asm 63
end

fun resexchange
#asm 64
end

fun build_runestone int build_runestone.can local
#asm 65 build_runestone.can
end

fun build_portal int build_portal.can local
#asm 66 build_portal.can
end

fun build_circle int build_circle.can local
#asm 67 build_circle.can
end

// where is 68???
fun attack_mode int attack_mode.can local
#asm 69 attack_mode.can
end

fun demon_manaburn int demon_manaburn.can
#asm 70 demon_manaburn.can
end

fun steal_res
#asm 71
end

fun local int local.P int local.FLAG local
#asm 72 local.P local.FLAG
end

#define TABLE_ALLOWSPELL 2
#define TABLE_ALLOWUPGR 1
#define TABLE_ALLOWUNIT 0
#define TABLE_LEARNSPELL 3
fun table int table.P int table.id int table.bit int table.can
#asm 73 table.P table.id table.bit table.can
end

fun build_gold int build_gold.can
#asm 75 build_gold.can
end

fun build_forest int build_forest.can
#asm 76 build_forest.can
end

fun ogremode int ogremode.id int ogremode.A int ogremode.B
#asm 74 ogremode.id ogremode.A ogremode.B
end

fun rally
#asm 77
end

fun fixed_damage
#asm 78
end

fun fixed_blood
#asm 79
end

fun no_random
fixed_damage()
fixed_blood()
end

fun change_speed
#asm 80
end

fun th_first
#asm 87
end

// LOL
fun fireshield_flyers int fireshield_flyers.can
#asm 88 fireshield_flyers.can
end

fun more_res local
#asm 89
end

fun multicast
#asm 90
end

fun ally int ally.A int ally.B int ally
#asm 91 ally.A ally.B ally
end

fun vis int ally.A int ally.B int ally
#asm 92 ally.A ally.B ally
end

fun pathfix
#asm 93
end

fun aifix
#asm 94
end

fun savefix
#asm 97
end

// AI & save
fun wc2fix
aifix()
savefix()
end

fun remove_terrain int remove_terrain.type int remove_terrain.x int remove_terrain.y
#asm 95 remove_terrain.type remove_terrain.x remove_terrain.y
end

fun reveal_map int reveal_map.MASK int reveal_map.x int reveal_map.y int reveal_map.R
#asm 96 reveal_map.x reveal_map.y reveal_map.MASK reveal_map.R
end

// Capture enemy units with low HP
// If you dont use command patrol you can easily kill this unit))
fun unit_capture
#asm 98
end

fun briefing int briefing.id
#asm 100 briefing.id
end

fun victory_vid int victory_vid.id local
#asm 101 victory_vid.id
end

fun defeat_vid int defeat_vid.id local
#asm 102 defeat_vid.id
end

fun period int period.val
#asm 103 period.val
end

/// CAMPAIGN
fun campaign
#asm 104
end

fun is_completed int is_completed.CRC
#asm 105 is_completed.CRC@32
end

fun set_race int set_race.P int set_race.race
#asm 106 set_race.P set_race.race
end

fun create_bullet int create_bullet.x int create_bullet.y int create_bullet.type
#asm 107 create_bullet.x create_bullet.y create_bullet.type
end

fun create_sound int create_bullet.x int create_bullet.y int create_bullet.type
#asm 108 create_bullet.x create_bullet.y create_bullet.type
end

fun set_upgrade int set_upgrade.P int set_upgrade.upgr int* set_upgrade.res
#asm 109 set_upgrade.upgr set_upgrade.P set_upgrade.res
end

fun get_upgrade int get_upgrade.P int get_upgrade.upgr int* get_upgrade.res
#asm 110 get_upgrade.upgr get_upgrade.P get_upgrade.res
end

fun get_kills int get_kills.killer int get_kills.target int get_kills.unit int* get_kills.res
#asm 111 get_kills.res get_kills.unit get_kills.killer get_kills.target
end

fun get_region_center int* get_region_center.x int* get_region_center.y
#asm 112 get_region_center.x get_region_center.y
end

fun remove_terrain int remove_terrain.type
#asm 113 remove_terrain.type
end

fun build_gold_everywhere local
#asm 114
end

fun build_forest_everywhere local
#asm 115
end

fun set_forest_price int set_forest_price.price local
#asm 116 set_forest_price.price
end

fun is int if.P int if.type int if.flag
#asm 117 if.flag if.type if.P
end

fun unit_create int unit_create.unit int unit_create.P int* unit_create.x int* unit_create.y int* unit_create.cnt
#asm 118 unit_create.x unit_create.y unit_create.unit unit_create.P unit_create.cnt
end

fun tower_speed
#asm 119
end

fun change_mission_text auto text
#asm 120
#define message #message
message text
#undef message
end

fun change_unit_name int change_unit_name.unit auto text
#asm 121 change_unit_name.unit
#define message #message
message text
end

/// UNIT LIST FUNCTIONS
fun find_all_alive_units int find_all_alive_units.TYPE
#asm 6 0 find_all_alive_units.TYPE
end

fun sort_in_region
#asm 6 1
end

fun sort_stat int sort_stat.id int sort_stat.value int sort_stat.cmp
#asm 6 2 sort_stat.id sort_stat.value@16 sort_stat.cmp
end

fun set_stat int set_stat.id int set_stat.value
#asm 6 3 set_stat.id set_stat.value@16
end

fun kill_all
#asm 6 4
end

fun flameshield_all
#asm 6 5
end

fun heal_all int heal_all.amount
#asm 6 6 heal_all.amount
end

fun sort_completed
#asm 6 7
end

fun teleport_all int teleport_all.x int teleport_all.y
#asm 6 8 teleport_all.x teleport_all.y
end

fun give_all int give_all.P
#asm 6 9 give_all.P
end

fun resize int resize.new_size
#asm 6 10 resize.new_size
end

fun autocast
#asm 6 11
end

fun order_all int order_all.order int order_all.x int order_all.y
#asm 6 12
end

fun damage_all int damage_all.val
#asm 6 13 damage_all.val@16
end

#define LOAD_PEON_GOLD 0
#define LOAD_PEON_WOOD 1
#define LOAD_PEON_ANY 2
fun load_peon int load_peon.res
#asm 6 15 load_peon.res
end

fun load_sort int load_sort.res
#asm 6 16
end

fun load_unsort int load_sort.res
#asm 6 17
end

fun reveal_map int reveal_map.MASK int reveal_map.R
#asm 6 18 reveal_map.MASK reveal_map.R
end

// set region around first unit in list
fun set_region2 int set_region2.R
#asm 6 19 set_region2.R
end

fun get_stat int get_stat.id int* get_stat.res
#asm 99 get_stat.res get_stat.id
end

fun slow_aura int aura.n int aura.p
#asm 81 aura.n aura.p
end

fun death_aura int aura.n int aura.p
#asm 82 aura.n aura.p
end

fun defence_aura int aura.n int aura.p
#asm 83 aura.n aura.p
end

fun vampire_aura int aura.n int aura.p
#asm 84 aura.n aura.p
end

fun prevent_aura int aura.n int aura.p
#asm 85 aura.n aura.p
end



#endif
/// STDLIB {end}


