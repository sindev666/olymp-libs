#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>


using namespace std;
using namespace __gnu_pbds;

// /*
//                                                //////////**DEFINES - START**//////////

#define ret return
#define fi first
#define se second
#define mp make_pair
#define all(x) x.begin(), x.end()
#define be(x) x.begin()
#define en(x) x.end()
#define sz(x) x.size()
#define for0(i, n) for (long long  i = 0; i < (n); ++i)
#define for1(i, n) for (long long i = 1; i < (n); ++i)
#define rfor0(i, n) for (long long i = (n) - 1; i >= 0; --i)
#define rfor1(i, n) for (long long i = (n) - 1; i >= 1; --i)
#define rep(i, a, n) for (long long i = a; i < ll(n); ++i)
#define popcount __builtin_popcount
#define popcountll __builtin_popcountll
#define fastIO() {ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
#define con continue
#define pb push_back
#define pob pop_back
#define deb(x) cout << (#x) << " is " << (x) << endl
#define ins insert
#define len(s) (s).length()
#define gi greater<int>()
#define gll greater<long long>()
#define gstr greater<string>()
#define gpll greater<pair<long long, long long>>()
#define rast(x1, y1, x2, y2) sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define rev reverse
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define rs resize
#define last(a) a.back()
#define co count
#define ba(a) a.back()
#define um unordered_map
#define rsun(a) a.resize(unique(a.begin(),a.end())-a.begin())
#define endl '\n'
//#define sqrt sqrt1
#ifdef OG_Matveychick1
bool local = true;
#else
bool local = false;
#endif

//                                                \\\\\\\\\\**DEFINES - END**\\\\\\\\\\
// */

// /*
//                                                //////////**CONSTANTS - START**//////////

const long double pi = 3.141592653589793238462643383279;
const long long mod1 = 1e9 + 7;
const long long mod2 = 998244353;
const long long MAXLL = 9223372036854775807;
const long long MAXINT = 2147483647;
const long double eps = 1e-9;

//                                                \\\\\\\\\\**CONSTANTS - END**\\\\\\\\\\
// */

// /*
//                                                //////////**TYPEDEFS - START**//////////

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<char> vc;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<ull> vull;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef pair<double, double> pdd;
typedef long double ld;
typedef double D;
typedef vector<ld> vld;
typedef vector<pair<ld, ld>> vpld;
typedef string str;
typedef set<ll> sll;
typedef set<int> si;
typedef set<str> ss;
typedef set<pii> spii;
typedef multiset<int> msi;
typedef multiset<ll> msll;
typedef multiset<str> mss;
typedef multiset<pii> mspii;
typedef multiset<pll> mspll;
typedef map<str, str> mps;
typedef map<int, int> mpi;
typedef map<ll, ll> mpll;
typedef map<int, vi> mpvi;
typedef map<int, vll> mpvll;
typedef map<char, int> mpci;
typedef multimap<ll, ll> mmpll;
typedef multimap<str, str> mmps;
typedef multimap<int, int> mmpi;
typedef vector<vector<int>> vvi;
typedef vector<vector<long long>> vvll;
typedef vector<vector<long double>> vvld;
typedef vector<vector<char>> vvc;
typedef vector<vs> vvs;
typedef vector<D> vD;
typedef set<pair<ll, ll>> spll;
typedef pair<ull, ull> pull;
typedef vector<pull> vpull;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef set<char> sc;
typedef queue<int> qi;
typedef queue<ll> qll;
typedef queue<bool> qb;
typedef vector<sll> vsll;
typedef queue<pair<ll, ll>> qpll;
typedef vector<vector<pair<int, int>>> vvpii;
typedef vector<vector<pair<ll, ll>>> vvpll;
typedef vector<spll> vspll;
typedef multiset<char> msc;
typedef queue<str> qs;
typedef vector<set<int>> vsi;
typedef priority_queue<ll> pqll;
typedef vector<vsll> vvsll;
typedef pair<ld, ld> pld;
typedef vector<vvll> vvvll;
typedef set<ld> sld;

//                                                \\\\\\\\\\**TYPEDEFS - END**\\\\\\\\\\
// */

// /*
//                                                //////////**TEMPLATES - START**//////////


template<typename T>
istream &operator>>(istream &in, vector<T> &a) {
    for (T &i: a) in >> i;
    return in;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, vector<pair<T1, T2>> &a) {
    for (pair<T1, T2> &i: a) in >> i.fi >> i.se;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, const vector<T> &a) {
    for (auto i: a) {
        out << i << " ";
    }
    return out;
}

template<typename T1, typename T2>
ostream &operator<<(ostream &out, vector<pair<T1, T2>> &a) {
    for (pair<T1, T2> i: a) out << i.fi << " " << i.se << endl;
    return out;
}

template<typename T1>
ostream &operator<<(ostream &out, vector<vector<T1>> &a) {
    for (vector<T1> i: a) {
        for (T1 j: i) out << j << " ";
        out << endl;
    }
    return out;
}

template<typename T1, typename T2>
inline T1 min(T1 a, T2 b) {
    b = (T1) b;
    return a > b ? b : a;
}

template<typename T1, typename T2>
inline T1 max(T1 a, T2 b) {
    b = (T1) b;
    return a > b ? a : b;
}

template<typename T1, typename T2>
inline void amin(T1 &a, T2 b) {
    a = min(a, b);
}

template<typename T1, typename T2>
inline void amax(T1 &a, T2 b) {
    a = max(a, b);
}


//                                                \\\\\\\\\\**TEMPLATES - END**\\\\\\\\\\
// */




// This bear is a good alternative to duck!!!
/*
    ▒▒▒▒      ▒▒▒▒▒▒
  ▒▒░░░░▒▒▒▒▒▒▒░░░░▒▒
 ▒▒░░░░░░▒▒▒▒▒░░░  ░▒▒
▒▒░   ░░▒▒▒▒▒▒▒░░  ░▒▒
▒▒░  ░▒▒▒▒▒▒▒▒▒▒▒ ░▒
 ▒░░▒▒▒▒▒▒█▒▒▒▒▒█▒▒
   ▒▒▒▒▒▒░██▒▒▒▒██ ▒
   ▒▒▒▒▒░░░░███░░░▒▒
   ▒▒▒▒▒░░   ███    ▒▒
    ▒▒░░  ▀▄▄▄▄▄▄▀░▒
     ▒▒▒░     ▀▀ ░▒▒
   ▒▒▒░▒░░░▒▒▒░ ▒▒▒▒▒
  ▒▒▒░▒▒▒▒▒░░░▒░▒▒▒▒▒▒
 ▒▒▒░▒▒▒▒   ▒▒  ▒▒▒▒▒▒▒
 ▒▒▒░▒░░         ░▒▒▒▒
 */



double getTime() {
    return clock() / (double) CLOCKS_PER_SEC;
};
mt19937_64 rn(chrono::steady_clock::now().time_since_epoch().count());
//mt19937_64 rn(2);

long long rnd(long long l, long long r) {
    long long a = rn() % (r - l + 1) + l;
    ret a;
}

void solve();

int main() {
    //setlocale(LC_ALL, "rus");
    fastIO();
    if (local) {
        freopen("output.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);
    }
    ll t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
    if (local) {
        cout.precision(32);
        cout << endl << fixed << "time = " << getTime();
    }
    return 0;
}


/*
	___        __              __   ______          __        _____ __             __          __  __
   /   | _____/ /___  ______ _/ /  / ____/___  ____/ /__     / ___// /_____ ______/ /______   / / / /__  ________
  / /| |/ ___/ __/ / / / __ `/ /  / /   / __ \/ __  / _ \    \__ \/ __/ __ `/ ___/ __/ ___/  / /_/ / _ \/ ___/ _ \
 / ___ / /__/ /_/ /_/ / /_/ / /  / /___/ /_/ / /_/ /  __/   ___/ / /_/ /_/ / /  / /_(__  )  / __  /  __/ /  /  __/
/_/  |_\___/\__/\__,_/\__,_/_/   \____/\____/\__,_/\___/   /____/\__/\__,_/_/   \__/____/  /_/ /_/\___/_/   \___/
*/







struct node {
    ll x, y1, y2, bl;

    node() {}

    node(ll x, ll y1, ll y2, ll bl) : x(x), y1(y1), y2(y2), bl(bl) {}
};

vvll par;
vvll ans;

bool f(node &a, node &b) {
    if (a.x != b.x) ret a.x < b.x;
    ret a.bl > b.bl;
}

struct ST {
    struct node;
    ll n;
    vector<node> tree;

    struct node {
        vll st;

        node() : st({}) {}
    };

    node neutral;

    ST(ll n1) {
        n = n1;
        tree.rs(4 * n, neutral);
    }

    void update(ll l, ll r, ll val) {
        update(1, 0, n, l, r, val);
    }

    ll query(ll l, ll r) {
        ret query(1, 0, n, l, r);
    }

    void update(ll v, ll l, ll r, ll L, ll R, ll val, ll pr = -1) {
        if (l >= R || r <= L) {
            ret;
        }
        if (l >= L && r <= R) {
            if (val > 0) {
                tree[v].st.pb(val);
            } else {
                tree[v].st.pob();
            }
            ret;
        }
        ll m = (l + r) / 2;
        update(v * 2, l, m, L, R, val, sz(tree[v].st) ? ba(tree[v].st) : pr);
        update(v * 2 + 1, m, r, L, R, val, sz(tree[v].st) ? ba(tree[v].st) : pr);
    }

    ll query(ll v, ll l, ll r, ll L, ll R) {
        if (l == L && r == L + 1) {
            if (sz(tree[v].st)) {
                ans[ba(tree[v].st) - 1].pb(R);
                ret ba(tree[v].st);
            }
            ret 0;
        }
        if (l > L || r <= L) {
            ret 0;
        }
        ll m = (l + r) / 2;
        ll bl = query(v * 2, l, m, L, R);
        bl += query(v * 2 + 1, m, r, L, R);
        if (bl)
            ret bl;
        else {
            if (sz(tree[v].st)) {
                ans[ba(tree[v].st) - 1].pb(R);
                ret ba(tree[v].st);
            }
            ret 0;
        }
    }
};

struct kva {
    ll x1, x2, y1, y2, i;

    kva() {}

    kva(ll x1, ll y1, ll x2, ll y2, ll i) : x1(x1), y1(y1), x2(y2), y2(y2), i(i) {}
};

bool f1(kva &a, kva &b) {
    ret ((a.x2 - a.x1) * (a.y2 - a.y1) < (b.x2 - b.x1) * (b.y2 - b.y1));
}

vll r;

bool f2(kva &a, kva &b) {
    ret a.i < b.i;
}

bool f3(ll &a, ll &b) {
    ret r[a] < r[b];
}

struct ST1 {
    struct node;
    ll n;
    vector<node> tree;

    struct node {
        pll x;

        node() {}

        node(pll x) : x(x) {}
    };

    node neutral = node({0ll, 0ll});

    friend node operator+(node a, node b) {
        if (a.x.fi == b.x.fi) ret b;
        else if (a.x.fi > b.x.fi) ret a;
        else
            ret b;
    }

    friend void operator%=(node &a, node b) {
        a.x.fi += b.x.fi;
        a.x.se += b.x.se;
    }

    ST1(ll n1) {
        n = n1;
        tree.rs(4 * n, neutral);
    }


    void update(ll pos, pll val) {
        update(1, 0, n, pos, val);
    }

    node query(ll l, ll r, ll val) {
        ret query(1, 0, n, l, r, val);
    }

    void update(ll v, ll l, ll r, ll pos, pll val) {
        if (l > pos || r <= pos) {
            ret;
        }
        if (l == r - 1) {
            tree[v] %= val;
            ret;
        }
        ll m = (l + r) / 2;
        update(v * 2, l, m, pos, val);
        update(v * 2 + 1, m, r, pos, val);
        tree[v] = tree[v * 2] + tree[v * 2 + 1];
    }

    node query(ll v, ll l, ll r, ll L, ll R, ll val) {
        if (l >= R || r <= L) {
            ret neutral;
        }
        if (l == r - 1) {
            if (tree[v].x.fi > val)ret tree[v];
            else
                ret neutral;
        }
        ll m = (l + r) / 2;
        if (l >= L && r <= R) {
            if (tree[v * 2 + 1].x.fi > val) ret query(v * 2 + 1, m, r, L, R, val);
            else if (tree[v * 2].x.fi > val) ret query(v * 2, l, m, L, R, val);
            else
                ret neutral;
        } else {
            node re1 = query(v * 2, l, m, L, R, val);
            node re2 = query(v * 2 + 1, m, r, L, R, val);
            if (re2.x.fi > val) ret re2;
            else if (re1.x.fi > val) ret re1;
            else
                ret neutral;
        }
    }
};

void gen() {
    ll n = rnd(1, 10), m = rnd(1, 10);
    cout << n << " " << m << endl;
    ll it = 0;
    for0(i, n) {
        ll y1 = rnd(0, 50);
        ll y2 = rnd(y1, y1 + 50);
        ll pl = rnd(1, 5);
        cout << it << " " << y1 << " " << it + pl << " " << y2 << endl;
        if (rnd(0, 1) && pl > 1 && y2 - y1 > 1) {
            i++;
            ll x1 = rnd(it + 1, it + pl - 1);
            y1 = rnd(y1 + 1, y2 - 1);
            ll x2 = rnd(x1, it + pl - 1);
            y2 = rnd(y1, y2 - 1);
            cout << x1 << " " << y1 << " " << x2 << " " << y2 << endl;
        }
        it += pl + 1;
    }
    for0(i, m) {
        cout << rnd(0, 100) << " " << rnd(0, 100) << " " << rnd(1, 10) << endl;
    }
}

vvll F(ll n, ll m, vector<kva> b, vector<pair<pll, ll>> a) {
    vvll re(n);
    for0(i, n) {
        for0(j, m) {
            if (a[j].first.fi >= b[i].x1 && a[j].fi.fi <= b[i].x2 && a[j].first.se >= b[i].y1 &&
                a[j].fi.se <= b[i].y2)
                re[i].pb(a[j].se);
        }
        sort(all(re[i]));
        rsun(re[i]);
    }
    ret re;
}

void solve() {
//    gen();
//    ret;
    ll n, m;
    cin >> n >> m;
    vector<node> a;
    par.rs(n);
    fill(all(par), vll());
    ans.rs(n);
    fill(all(ans), vll());
    r.rs(n);
    fill(all(r), 0);
    vll y;
    vector<kva> b(n);
    for0(i, n) {
        ll x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        a.pb({x1, y1, y2, i + 1});
        a.pb({x2, y1, y2, -i - 1});
        y.pb(y1);
        y.pb(y2);
        b[i] = {x1, y1, x2, y2, i};
        r[i] = (x2 - x1) * (y2 - y1);
    }
    //sort(all(b), f1);
    vector<pair<pll, ll>> p;
    for0(i, m) {
        ll x1, y1, c;
        cin >> x1 >> y1 >> c;
        p.pb({{x1, y1}, c});
        a.pb({x1, y1, c, ll(0)});
        y.pb(y1);
    }
    vvll F1 = F(n, m, b, p);
    sort(all(b), f1);
    ll cnt = 0;
    map<ll, ll> ma;
    sort(all(y));
    rsun(y);
    for (auto x: y) {
        ma[x] = cnt++;
    }
    ST tree(cnt + 5);
    ST1 tree1(cnt + 5);
    for0(i, sz(a)) {
        if (a[i].bl != 0) {
            a[i].y1 = ma[a[i].y1];
            a[i].y2 = ma[a[i].y2];
        } else {
            a[i].y1 = ma[a[i].y1];
        }
    }
    sort(all(a), f);
    for0(i, sz(a)) {
        if (a[i].bl == 0) {
            tree.query(a[i].y1, a[i].y2);
        } else {
            if (a[i].bl > 0) {
                auto x = tree1.query(0, a[i].y1, a[i].y2);
                if (x.x.fi > a[i].y2) par[a[i].bl - 1].pb(x.x.se - 1);
                tree1.update(a[i].y1, {a[i].y2, a[i].bl});
            } else {
                tree1.update(a[i].y1, {-a[i].y2, a[i].bl});
            }
            tree.update(a[i].y1, a[i].y2 + 1, a[i].bl);
        }
    }
    for0(i, n) {
        sort(all(ans[b[i].i]));
        sort(all(par[b[i].i]), f3);
        rsun(ans[b[i].i]);
        if (sz(par[b[i].i])) {
            for (auto x: ans[b[i].i]) ans[par[b[i].i][0]].pb(x);
        }
    }
    sort(all(b), f2);
    for (auto x: F1) {
        cout << sz(x) << endl;
    }
//    for0(i, n) {
//        if (sz(ans[i]) != sz(F1[i])) {
//            cout << "!!!!!!!!!" << endl << n << " " << m << endl;
//            for0(i, n) {
//                cout << b[i].x1 << " " << b[i].y1 << " " << b[i].x2 << " " << b[i].y2 << endl;
//            }
//            for0(i, m) {
//                cout << p[i].fi.fi << " " << p[i].fi.se << " " << p[i].se << endl;
//            }
//            for0(i, n) {
//                cout << sz(F1[i]) << " " << sz(ans[i]) << endl;
//            }
//            exit(0);
//        }
//    }
}

















