#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

// /*
//                                                //////////**DEFINES - START**//////////

#define ret return
#define fi first
#define se second
#define mp make_pair
#define all(x) x.begin(), x.end()
#define be(x) x.begin()
#define en(x) x.end()
#define sz(x) x.size()
#define for0(i, n) for (long long i = 0; i < (n); ++i)
#define for1(i, n) for (long long i = 1; i < (n); ++i)
#define rfor0(i, n) for (long long i = (n) - 1; i >= 0; --i)
#define rfor1(i, n) for (long long i = (n) - 1; i >= 1; --i)
#define rep(i, a, n) for (long long i = a; i < ll(n); ++i)
#define popcount __builtin_popcount
#define popcountll __builtin_popcountll
#define fastIO() ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define con continue
#define pb push_back
#define pob pop_back
#define deb(x) cout << (#x) << " is " << (x) << endl
#define ins insert
#define len(s) (s).length()
#define gi greater<int>()
#define gll greater<long long>()
#define gstr greater<string>()
#define gpll greater<pair<long long, long long>>()
#define rast(x1, y1, x2, y2) sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
#define rev reverse
#define ub upper_bound
#define lb lower_bound
#define bs binary_search
#define rs resize
#define last(a) a.back()
#define co count
#define ba(a) a.back()
#define um unordered_map
#define rsun(a) a.resize(unique(a.begin(),a.end())-a.begin())
#define endl '\n'
//#define sqrt sqrt1
#ifdef OG_Matveychick1
bool local = true;
#else
bool local = false;
#endif

//                                                \\\\\\\\\\**DEFINES - END**\\\\\\\\\\
// */

// /*
//                                                //////////**CONSTANTS - START**//////////

const long double pi = 3.141592653589793238462643383279;
const long long mod1 = 1e9 + 7;
const long long mod2 = 998244353;
const long long MAXLL = 9223372036854775807;
const long long MAXINT = 2147483647;
const long double eps = 1e-9;

//                                                \\\\\\\\\\**CONSTANTS - END**\\\\\\\\\\
// */

// /*
//                                                //////////**TYPEDEFS - START**//////////

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<char> vc;
typedef pair<int, int> pii;
typedef vector<pii> vpii;
typedef vector<string> vs;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<ull> vull;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef pair<double, double> pdd;
typedef long double ld;
typedef double D;
typedef vector<ld> vld;
typedef vector<pair<ld, ld>> vpld;
typedef string str;
typedef set<ll> sll;
typedef set<int> si;
typedef set<str> ss;
typedef set<pii> spii;
typedef multiset<int> msi;
typedef multiset<ll> msll;
typedef multiset<str> mss;
typedef multiset<pii> mspii;
typedef multiset<pll> mspll;
typedef map<str, str> mps;
typedef map<int, int> mpi;
typedef map<ll, ll> mpll;
typedef map<int, vi> mpvi;
typedef map<int, vll> mpvll;
typedef map<char, int> mpci;
typedef multimap<ll, ll> mmpll;
typedef multimap<str, str> mmps;
typedef multimap<int, int> mmpi;
typedef vector<vector<int>> vvi;
typedef vector<vector<long long>> vvll;
typedef vector<vector<long double>> vvld;
typedef vector<vector<char>> vvc;
typedef vector<vs> vvs;
typedef vector<D> vD;
typedef set<pair<ll, ll>> spll;
typedef pair<ull, ull> pull;
typedef vector<pull> vpull;
typedef vector<bool> vb;
typedef vector<vb> vvb;
typedef set<char> sc;
typedef queue<int> qi;
typedef queue<ll> qll;
typedef queue<bool> qb;
typedef vector<sll> vsll;
typedef queue<pair<ll, ll>> qpll;
typedef vector<vector<pair<int, int>>> vvpii;
typedef vector<vector<pair<ll, ll>>> vvpll;
typedef vector<spll> vspll;
typedef multiset<char> msc;
typedef queue<str> qs;
typedef vector<set<int>> vsi;
typedef priority_queue<ll> pqll;
typedef vector<vsll> vvsll;
typedef pair<ld, ld> pld;
typedef vector<vvll> vvvll;
typedef set<ld> sld;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

//                                                \\\\\\\\\\**TYPEDEFS - END**\\\\\\\\\\
// */

// /*
//                                                //////////**TEMPLATES - START**//////////


template<typename T>
istream &operator>>(istream &in, vector<T> &a) {
    for (T &i: a) in >> i;
    return in;
}

template<typename T1, typename T2>
istream &operator>>(istream &in, vector<pair<T1, T2>> &a) {
    for (pair<T1, T2> &i: a) in >> i.fi >> i.se;
    return in;
}

template<typename T>
ostream &operator<<(ostream &out, const vector<T> &a) {
    for (auto i: a) {
        out << i << " ";
    }
    return out;
}

template<typename T1, typename T2>
ostream &operator<<(ostream &out, vector<pair<T1, T2>> &a) {
    for (pair<T1, T2> i: a) out << i.fi << " " << i.se << endl;
    return out;
}

template<typename T1>
ostream &operator<<(ostream &out, vector<vector<T1>> &a) {
    for (vector<T1> i: a) {
        for (T1 j: i) out << j << " ";
        out << endl;
    }
    return out;
}

template<typename T1, typename T2>
inline T1 min(T1 a, T2 b) {
    b = (T1) b;
    return a > b ? b : a;
}

template<typename T1, typename T2>
inline T1 max(T1 a, T2 b) {
    b = (T1) b;
    return a > b ? a : b;
}

template<typename T1, typename T2>
inline void amin(T1 &a, T2 b) {
    a = min(a, b);
}

template<typename T1, typename T2>
inline void amax(T1 &a, T2 b) {
    a = max(a, b);
}


//                                                \\\\\\\\\\**TEMPLATES - END**\\\\\\\\\\
// */




// This bear is a good alternative to duck!!!
/*
    ▒▒▒▒      ▒▒▒▒▒▒
  ▒▒░░░░▒▒▒▒▒▒▒░░░░▒▒
 ▒▒░░░░░░▒▒▒▒▒░░░  ░▒▒
▒▒░   ░░▒▒▒▒▒▒▒░░  ░▒▒
▒▒░  ░▒▒▒▒▒▒▒▒▒▒▒ ░▒
 ▒░░▒▒▒▒▒▒█▒▒▒▒▒█▒▒
   ▒▒▒▒▒▒░██▒▒▒▒██ ▒
   ▒▒▒▒▒░░░░███░░░▒▒
   ▒▒▒▒▒░░   ███    ▒▒
    ▒▒░░  ▀▄▄▄▄▄▄▀░▒
     ▒▒▒░     ▀▀ ░▒▒
   ▒▒▒░▒░░░▒▒▒░ ▒▒▒▒▒
  ▒▒▒░▒▒▒▒▒░░░▒░▒▒▒▒▒▒
 ▒▒▒░▒▒▒▒   ▒▒  ▒▒▒▒▒▒▒
 ▒▒▒░▒░░         ░▒▒▒▒
 */



double getTime() {
    return clock() / (double) CLOCKS_PER_SEC;
}

mt19937_64 rn(chrono::steady_clock::now().time_since_epoch().count());
//mt19937_64 rn(2);

long long rnd(long long l, long long r) {
    long long a = rn() % (r - l + 1) + l;
    ret a;
}

void solve();

int main() {
    //setlocale(LC_ALL, "rus");
    fastIO()
    if (local) {
        freopen("input.txt", "r", stdin);
        //freopen("output.txt", "w", stdout);
    }
    ll t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
    if (local) {
        cout.precision(32);
        cout << endl << fixed << "time = " << getTime();
    }
    return 0;
}


/*
	___        __              __   ______          __        _____ __             __          __  __
   /   | _____/ /___  ______ _/ /  / ____/___  ____/ /__     / ___// /_____ ______/ /______   / / / /__  ________
  / /| |/ ___/ __/ / / / __ `/ /  / /   / __ \/ __  / _ \    \__ \/ __/ __ `/ ___/ __/ ___/  / /_/ / _ \/ ___/ _ \
 / ___ / /__/ /_/ /_/ / /_/ / /  / /___/ /_/ / /_/ /  __/   ___/ / /_/ /_/ / /  / /_(__  )  / __  /  __/ /  /  __/
/_/  |_\___/\__/\__,_/\__,_/_/   \____/\____/\__,_/\___/   /____/\__/\__,_/_/   \__/____/  /_/ /_/\___/_/   \___/
*/


um<char, ll> ma;

struct node {
    node *l, *r;
    int x[4];
    char c;
    int s;

    node() : l(0), r(0), s(0), c(0) { memset(x, 0, sizeof(x)); }

    node(char c) : l(0), r(0), s(1), c(c) {
        memset(x, 0, sizeof(x));
        x[ma[c]]++;
    }
};

vector<node *> ve;

void update(node *v) {
    for0(i, 4) v->x[i] = (v->l ? v->l->x[i] : 0) + (v->r ? v->r->x[i] : 0);
    v->x[ma[v->c]]++;
    v->s = (v->l ? v->l->s : 0) + (v->r ? v->r->s : 0) + 1;
}

node *copy(node *v) {
    ret new node(*v);
}

//node *l1, *r1, *l2, *r2;
pair<node *, node *> a1, a2;

pair<node *, node *> split(node *v, int k) {
    if (!v) ret {0, 0};
    v = copy(v);
    if ((v->l ? v->l->s : 0) >= k) {
        auto [l, r] = split(v->l, k);
        v->l = r;
        update(v);
        ret {l, v};
    } else {
        auto [l, r] = split(v->r, k - (v->l ? v->l->s : 0) - 1);
        v->r = l;
        update(v);
        ret {v, r};
    }
}

node *merge(node *l, node *r) {
    if (!l) ret r;
    if (!r) ret l;
    if (rnd(0, l->s + r->s - 1) < r->s) {
    l = copy(l);
        l->r = merge(l->r, r);
        update(l);
        ret l;
    } else {
    r = copy(r);
        r->l = merge(l, r->l);
        update(r);
        ret r;
    }
}

vll it;

void push_back(short id, char c) {
    ve.push_back(new node(c));
    ba(ve) = merge(ve[it[id]], ba(ve));
    it[id] = sz(ve) - 1;
}

int *count(short id, int l, int r) {
    a1 = split(ve[it[id]], r);
    a2 = split(a1.fi, l);
    ret a2.se->x;
}

void mutate(short id, int k, char c) {
    a1 = split(ve[it[id]], k);
    a2 = split(a1.fi, k - 1);
    a2.se->x[ma[a2.se->c]]--;
    a2.se->c = c;
    a2.se->x[ma[a2.se->c]]++;
    ve.pb(merge(merge(a2.fi, a2.se), a1.se));
    it[id] = sz(ve) - 1;
}

void cross(short id1, short id2, int k1, int k2) {
    a1 = split(ve[it[id1]], k1);
    a2 = split(ve[it[id2]], k2);
    ve.pb(merge(a1.fi, a2.se));
    it.pb(sz(ve) - 1);
    ve.pb(merge(a2.fi, a1.se));
    it.pb(sz(ve) - 1);
}

void solve() {
    ma['A'] = 0;
    ma['G'] = 1;
    ma['T'] = 2;
    ma['C'] = 3;
    ll n;
    cin >> n;
    it.rs(n + 1, 0);
    ve.pb(0);
    str s;
    for0(i, n) {
        cin >> s;
        for0(j, sz(s)) {
            pb(i + 1, s[j]);
        }
    }
    short q;
    short id, id1, id2;
    int k, k1, k2, l, r;
    cin >> q;
    for0(i, q) {
        cin >> s;
        if (s == "MUTATE") {
            char c;
            cin >> id >> k >> c;
            mutate(id, k, c);
        }
        if (s == "CROSS") {
            cin >> id1 >> id2 >> k1 >> k2;
            cross(id1, id2, k1, k2);
        }
        if (s == "COUNT") {
            cin >> id >> l >> r;
            auto p = count(id, l - 1, r);
            cout << p[0] << " " << p[1] << " " << p[2] << " " << p[3] << endl;
        }
    }
}







































